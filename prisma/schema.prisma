// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Member {
    id            Int             @id @default(autoincrement())
    active        Boolean
    verified      Boolean         @default(false)
    nickname      String          @unique
    password      String
    fullName      String
    phone         String
    address       String
    description   String
    files         String
    lastOnline    Int
    createdDate   Int
    posts         Post[]
    likedPosts    LikeOfPost[]
    comments      Comment[]
    likedComments LikeOfComment[]
    following     Follow[]        @relation("following")
    followers     Follow[]        @relation("follower")
    chats         Chat[]          @relation("ChatMembers")
    message       Message[]
}

model Post {
    id          Int          @id @default(autoincrement())
    active      Boolean
    member      Member       @relation(fields: [memberId], references: [id])
    memberId    Int
    description String
    files       String
    lastUpdate  Int
    createdDate Int
    likes       LikeOfPost[]
    comments    Comment[]
}

model LikeOfPost {
    member      Member @relation(fields: [memberId], references: [id])
    post        Post   @relation(fields: [postId], references: [id])
    memberId    Int
    postId      Int
    createdDate Int

    @@id([memberId, postId])
}

model Comment {
    id          Int             @id @default(autoincrement())
    member      Member          @relation(fields: [memberId], references: [id])
    post        Post            @relation(fields: [postId], references: [id])
    memberId    Int
    postId      Int
    parentId    Int
    description String
    files       String
    lastUpdate  Int
    createdDate Int
    likes       LikeOfComment[]
}

model LikeOfComment {
    member      Member  @relation(fields: [memberId], references: [id])
    comment     Comment @relation(fields: [commentId], references: [id])
    memberId    Int
    commentId   Int
    createdDate Int

    @@id([memberId, commentId])
}

model Follow {
    member      Member @relation(fields: [memberId], references: [id], name: "follower")
    follower    Member @relation(fields: [followerId], references: [id], name: "following")
    memberId    Int
    followerId  Int
    createdDate Int

    @@id([memberId, followerId])
}

model Chat {
    id       Int       @id @default(autoincrement())
    name     String?
    chatnick String    @unique
    members  Member[]  @relation("ChatMembers")
    messages Message[]
}

model Message {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt Int 
    author    Member   @relation(fields: [authorId], references: [id])
    chat      Chat     @relation(fields: [chatId], references: [id])
    authorId  Int
    chatId    Int
}
